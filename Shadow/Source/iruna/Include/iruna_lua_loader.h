//---------------------------------------------------------
// 
//	iruna_lua_loader.h
//	Luaスクリプト読み込み
//	作成日 1月30日
//	製作者 立川 翔野
// 
//---------------------------------------------------------
/*----多重インクルード------------------------------------------------*/
#ifndef IRUNA_LUA_LOADER_H
#define IRUNA_LUA_LOADER_H

/*----インクルード------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include <lua.hpp>


/*----ネームスペース------------------------------------------------*/
namespace iruna
{
namespace script
{

//=====================================================================
//
//	クラス名	:	LuaType
//	処理		:	Lua内部列挙定義
//	製作者		:	立川 翔野
//	作成日		:	2012/01/30	- 作成
//
//=====================================================================
typedef enum LuaType
{
	Nill	= LUA_TNIL,				//	NULL
	Bool	= LUA_TBOOLEAN,			//	bool
	Void	= LUA_TLIGHTUSERDATA,	//	void
	Double	= LUA_TNUMBER,			//	double	
	Table	= LUA_TTABLE,			//	スタックテーブル
	Func	= LUA_TFUNCTION,		//	Lua関数定義

};

//=====================================================================
//
//	クラス名	:	LuaLoader
//	処理		:	Luaスクリプト読み込み
//	製作者		:	立川 翔野
//	作成日		:	2012/01/30	- 作成
//
//=====================================================================
class LuaLoader
{
private:

	lua_State*	lua;			//	LuaState構造体
	std::string scriptPath;		//	ディレクトリパス

public:

	//--------------------------------------------------------------------
	// 
	//	処理	:	コンストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2012/01/30	- 作成
	// 
	//--------------------------------------------------------------------
	LuaLoader();

	//--------------------------------------------------------------------
	// 
	//	処理	:	デストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2012/01/30	- 作成
	// 
	//--------------------------------------------------------------------
	~LuaLoader();

	//--------------------------------------------------------------------
	// 
	//	処理	:	Luaスクリプト読み込み
	//	製作者	:	立川 翔野
	//	第1引数	:	[in] in_path - スクリプトパス
	//	作成日	:	2012/01/30	- 作成
	// 
	//--------------------------------------------------------------------
	bool Load( std::string in_path );

	//--------------------------------------------------------------------
	// 
	//	処理	:	解放処理
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------	
	void Relese();

	//--------------------------------------------------------------------
	// 
	//	処理	:	スクリプトデータの取得
	//	第1引数	:	[inout]out_data - 取得するbool型のデータ
	//	第2引数	:	[in]in_path - 取得するスクリプト内の変数名
	//	戻り値	:	結果フラグ	true : 成功　false : 失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2012/01/30	- 作成
	// 
	//--------------------------------------------------------------------
	bool GetScriptData( bool& out_data, std::string in_path, int index );

	//--------------------------------------------------------------------
	// 
	//	処理	:	スクリプトデータの取得
	//	第1引数	:	[inout]out_data - 取得するdouble型のデータ
	//	第2引数	:	[in]in_path - 取得するスクリプト内の変数名
	//	戻り値	:	結果フラグ	true : 成功　false : 失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2012/01/30	- 作成
	// 
	//--------------------------------------------------------------------
	bool GetScriptData( double& out_data, std::string in_path, int index );

	//--------------------------------------------------------------------
	// 
	//	処理	:	スクリプトデータの取得
	//	第1引数	:	[inout]out_data - 取得するvoid*型のデータ
	//	第2引数	:	[in]in_path - 取得するスクリプト内の変数名
	//	戻り値	:	結果フラグ	true : 成功　false : 失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2012/01/30	- 作成
	// 
	//--------------------------------------------------------------------
	bool GetScriptData( const void* out_data, std::string in_path, int index );

	//--------------------------------------------------------------------
	// 
	//	処理	:	スクリプト内の関数を呼び出す
	//	第1引数	:	[inout]in_name - 呼び出す関数名
	//	戻り値	:	結果フラグ	true : 成功　false : 失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2012/01/30	- 作成
	// 
	//--------------------------------------------------------------------
	bool CallFunc( std::string in_name );

};

}	//	end script
}	//	end	iruna

#endif	//	IRUNA_LUA_LOADER_H	end